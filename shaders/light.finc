in vec4 light_space_pos;
in vec2 tex_coords;
in vec2 ao_tex_coords;
in vec3 normal_interpo;
in mat3 tbn;

in vec3 norm_world_to_light;
in vec3 norm_world_to_eye;
in float light_distance_100;
in float depth_bias_multiplier;

uniform sampler2D base_texture;
uniform sampler2D norm_texture;
uniform sampler2D spec_texture;
uniform sampler2D ao_texture;
uniform sampler2D shadow_texture;

uniform bool use_lighting;
uniform bool use_specular_highlight;
uniform bool use_normal_map;
uniform bool use_ao_map;
uniform bool use_shadows;

uniform vec3 player_colour;

// We scale depth bias by distance so zooming won't affect peter-paning.
// Increasing this decreases shadow artifact when light hits almost parallel to a surface,
// but increases peter-paning.
const float kDepthBias = 0.004f;

// N=3 kernel
/*
const int kDepthMapFilterSize = 9;
const float kDepthMapFilterMultiplier = 1.0f / 16.0f;
const float[] kDepthMapFilter = float[](
  1.0f, 2.0f, 1.0f,
  2.0f, 4.0f, 2.0f,
  1.0f, 2.0f, 1.0f
);
const ivec2[] kDepthMapFilterOffsets = ivec2[](
  ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1),
  ivec2(-1, 0), ivec2(0, 0), ivec2(1, 0),
  ivec2(-1, 1), ivec2(0, 1), ivec2(1, 1)
);
*/

// N=5 kernel
const int kDepthMapFilterSize = 25;
const float kDepthMapFilterMultiplier = 1.0f / 256.0f;
const float[] kDepthMapFilter = float[](
  1.0f,  4.0f,  6.0f,  4.0f,  1.0f,
  4.0f, 16.0f, 24.0f, 16.0f,  4.0f,
  6.0f, 24.0f, 36.0f, 24.0f,  6.0f,
  4.0f, 16.0f, 24.0f, 16.0f,  4.0f,
  1.0f,  4.0f,  6.0f,  4.0f,  1.0f
);
const ivec2[] kDepthMapFilterOffsets = ivec2[](
  ivec2(-2, -2), ivec2(-1, -2), ivec2(0, -2), ivec2(1, -2), ivec2(2, -2),
  ivec2(-2, -1), ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1), ivec2(2, -1),
  ivec2(-2, 0), ivec2(-1, 0), ivec2(0, 0), ivec2(1, 0), ivec2(2, 0),
  ivec2(-2, 1), ivec2(-1, 1), ivec2(0, 1), ivec2(1, 1), ivec2(2, 1),
  ivec2(-2, 2), ivec2(-1, 2), ivec2(0, 2), ivec2(1, 2), ivec2(2, 2)
);

float shadow() {
  if (!use_shadows) {
    return 0.0f;
  }

  vec3 shadow_tex_coords = (light_space_pos.xyz / light_space_pos.w) * 0.5f + 0.5f;

  // TODO: is there a more efficient way to do this?
  if (shadow_tex_coords.x < 0.0f || shadow_tex_coords.x > 1.0f ||
      shadow_tex_coords.y < 0.0f || shadow_tex_coords.y > 1.0f) {
    return 0.0f;
  }

  float depth_bias = kDepthBias / light_distance_100 * depth_bias_multiplier;
  float shadow = 0.0f;

  // We have to unroll this for ANGLE.
  float depths[kDepthMapFilterSize] = float[](
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[0]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[1]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[2]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[3]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[4]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[5]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[6]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[7]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[8]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[9]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[10]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[11]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[12]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[13]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[14]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[15]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[16]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[17]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[18]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[19]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[20]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[21]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[22]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[23]).r,
    textureOffset(shadow_texture, shadow_tex_coords.xy, kDepthMapFilterOffsets[24]).r
  );

  for (int i = 0; i < kDepthMapFilterSize; ++i) {
    shadow += (shadow_tex_coords.z - depth_bias) > depths[i] ? kDepthMapFilter[i] * kDepthMapFilterMultiplier : 0.0f;
  }

  return shadow;
}

vec3 mix_colour(vec3 ambient, vec3 diffuse, vec3 specular) {
  float inv_in_shadow = 1.0f - shadow();
  return clamp(ambient + (diffuse + specular) * inv_in_shadow, 0.0, 1.0);
}

vec4 compute_lighting(bool use_player_colour, float ao_strength, vec3 ambient_light, float directional_intensity, float shininess) {
  vec4 colour = texture(base_texture, tex_coords);
  vec3 base_colour = colour.rgb;

  // Player colour computation:
  // https://wildfiregames.com/forum/topic/18340-lowpoly-tips/
  vec3 player_colour_mixed = base_colour * player_colour;

  if (use_player_colour) {
    base_colour = base_colour * colour.a + player_colour_mixed * (1.0 - colour.a);
  }

  vec3 normal = normal_interpo;

  if (use_normal_map) {
    normal = normalize(tbn * (texture(norm_texture, tex_coords).xyz * 2.0f - 1.0f));
  }

  if (use_lighting) {
    vec3 norm = normalize(normal);
    float diffuse_factor = max(dot(norm, norm_world_to_light), 0.0f) * directional_intensity;
    vec3 diffuse = diffuse_factor * base_colour;

    vec3 spec = vec3(0.0, 0.0, 0.0);
    if (use_specular_highlight) {
      vec3 spec_colour = texture(spec_texture, tex_coords).rgb;
      vec3 reflect_dir = reflect(-norm_world_to_light, norm);
      float spec_power = pow(max(dot(norm_world_to_eye, reflect_dir), 0.0), shininess);
      spec = spec_colour * spec_power;
    }

    vec3 ambient = ambient_light * base_colour;

    if (use_ao_map) {
      vec3 ao = texture(ao_texture, ao_tex_coords).rrr;
      ao = mix(vec3(1.0), ao * 2.0, ao_strength);
      ambient.rgb *= ao;
    }

    if (use_player_colour) {
      colour = vec4(mix_colour(ambient, diffuse, spec), 1.0f);
    } else {
      colour = vec4(mix_colour(ambient, diffuse, spec), colour.a);
    }
  }

  return colour;
}