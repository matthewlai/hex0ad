in vec4 light_space_pos;
in vec2 tex_coords;
in vec2 ao_tex_coords;
in vec3 normal_interpo;
in mat3 tbn;

in vec3 norm_world_to_light;
in vec3 norm_world_to_eye;
in float light_distance_100;
in float depth_bias_multiplier;

precision lowp sampler2D;
precision lowp sampler2DShadow;

uniform sampler2D base_texture;
uniform sampler2D norm_texture;
uniform sampler2D spec_texture;
uniform sampler2D ao_texture;
uniform sampler2DShadow shadow_texture;

uniform bool use_lighting;
uniform bool use_specular_highlight;
uniform bool use_normal_map;
uniform bool use_ao_map;
uniform bool use_shadows;

// This is either player colour or object colour (hair)
uniform vec3 alpha_colour;

// We scale depth bias by distance so zooming won't affect peter-paning.
// Increasing this decreases shadow artifact when light hits almost parallel to a surface,
// but increases peter-paning.
const float kDepthBias = 0.002f;

float shadow() {
  if (!use_shadows) {
    return 0.0f;
  }

  vec3 shadow_tex_coords = (light_space_pos.xyz / light_space_pos.w) * 0.5f + 0.5f;

  // TODO: is there a more efficient way to do this?
  if (shadow_tex_coords.x < 0.0f || shadow_tex_coords.x > 1.0f ||
      shadow_tex_coords.y < 0.0f || shadow_tex_coords.y > 1.0f) {
    return 0.0f;
  }

  float depth_bias = kDepthBias / light_distance_100 * depth_bias_multiplier;
  float shadow = 0.0f;

  shadow_tex_coords.z -= depth_bias;

  // Hard coded unrolled 3x3 filtering because many compilers seem to have problems
  // with this.
  shadow =
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(-1, -1)) * 1.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(0, -1)) * 2.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(1, -1)) * 1.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(-1, 0)) * 2.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(0, 0)) * 4.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(1, 0)) * 2.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(-1, 1)) * 1.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(0, 1)) * 2.0f +
    textureOffset(shadow_texture, shadow_tex_coords, ivec2(1, 1)) * 1.0f;

  return 1.0f - shadow / 16.0f;
}

vec3 mix_colour(vec3 ambient, vec3 diffuse, vec3 specular) {
  float inv_in_shadow = 1.0f - shadow();
  return clamp(ambient + (diffuse + specular) * inv_in_shadow, 0.0, 1.0);
}

vec4 compute_lighting(bool use_alpha_colour, float ao_strength, vec3 ambient_light, float directional_intensity, float shininess) {
  vec4 colour = texture(base_texture, tex_coords);
  vec3 base_colour = colour.rgb;

  // Player / object (hair) colour computation:
  // https://wildfiregames.com/forum/topic/18340-lowpoly-tips/
  vec3 colour_mixed = base_colour * alpha_colour;

  if (use_alpha_colour) {
    base_colour = base_colour * colour.a + colour_mixed * (1.0 - colour.a);
  }

  vec3 normal = normal_interpo;

  if (use_normal_map) {
    // TODO: move this matrix multiplication to vertex shader as an optimisation,
    // by doing all the lighting calculations in tangent space.
    // See https://learnopengl.com/Advanced-Lighting/Normal-Mapping
    // On M1 it doesn't seem to make any difference (normal map enabled vs disabled).
    normal = normalize(tbn * (texture(norm_texture, tex_coords).xyz * 2.0f - 1.0f));
  }

  if (use_lighting) {
    vec3 norm = normalize(normal);
    float diffuse_factor = max(dot(norm, norm_world_to_light), 0.0f) * directional_intensity;
    vec3 diffuse = diffuse_factor * base_colour;

    vec3 spec = vec3(0.0, 0.0, 0.0);
    if (use_specular_highlight) {
      vec3 spec_colour = texture(spec_texture, tex_coords).rgb;
      vec3 reflect_dir = reflect(-norm_world_to_light, norm);
      float spec_power = pow(max(dot(norm_world_to_eye, reflect_dir), 0.0), shininess);
      spec = spec_colour * spec_power;
    }

    vec3 ambient = ambient_light * base_colour;

    if (use_ao_map) {
      vec3 ao = texture(ao_texture, ao_tex_coords).rrr;
      ao = mix(vec3(1.0), ao * 2.0, ao_strength);
      ambient.rgb *= ao;
    }

    if (use_alpha_colour) {
      colour = vec4(mix_colour(ambient, diffuse, spec), 1.0f);
    } else {
      colour = vec4(mix_colour(ambient, diffuse, spec), colour.a);
    }
  }

  return colour;
}
